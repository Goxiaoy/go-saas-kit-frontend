/* tslint:disable */
/* eslint-disable */
/**
 * Realtime Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1GetConsentResponse } from '../models';
// @ts-ignore
import { V1GetLoginResponse } from '../models';
// @ts-ignore
import { V1GetLogoutResponse } from '../models';
// @ts-ignore
import { V1GrantConsentRequest } from '../models';
// @ts-ignore
import { V1GrantConsentResponse } from '../models';
// @ts-ignore
import { V1LogoutRequest } from '../models';
// @ts-ignore
import { V1LogoutResponse } from '../models';
// @ts-ignore
import { V1WebLoginAuthReply } from '../models';
// @ts-ignore
import { V1WebLoginAuthRequest } from '../models';
/**
 * AuthWebApi - axios parameter creator
 * @export
 */
export const AuthWebApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [consentChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetConsent: async (consentChallenge?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/web/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (consentChallenge !== undefined) {
                localVarQueryParameter['consentChallenge'] = consentChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [redirect] redirect url.
         * @param {string} [loginChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetWebLogin: async (redirect?: string, loginChallenge?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/web/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }

            if (loginChallenge !== undefined) {
                localVarQueryParameter['loginChallenge'] = loginChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [logoutChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetWebLogout: async (logoutChallenge?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/web/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logoutChallenge'] = logoutChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1GrantConsentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGrantConsent: async (body: V1GrantConsentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authWebGrantConsent', 'body', body)
            const localVarPath = `/v1/auth/web/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1WebLoginAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebWebLogin: async (body: V1WebLoginAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authWebWebLogin', 'body', body)
            const localVarPath = `/v1/auth/web/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1LogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebWebLogout: async (body: V1LogoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authWebWebLogout', 'body', body)
            const localVarPath = `/v1/auth/web/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthWebApi - functional programming interface
 * @export
 */
export const AuthWebApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthWebApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [consentChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebGetConsent(consentChallenge?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetConsentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebGetConsent(consentChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [redirect] redirect url.
         * @param {string} [loginChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebGetWebLogin(redirect?: string, loginChallenge?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebGetWebLogin(redirect, loginChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [logoutChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebGetWebLogout(logoutChallenge?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebGetWebLogout(logoutChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1GrantConsentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebGrantConsent(body: V1GrantConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GrantConsentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebGrantConsent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1WebLoginAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebWebLogin(body: V1WebLoginAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1WebLoginAuthReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebWebLogin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1LogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authWebWebLogout(body: V1LogoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authWebWebLogout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthWebApi - factory interface
 * @export
 */
export const AuthWebApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthWebApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [consentChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetConsent(consentChallenge?: string, options?: any): AxiosPromise<V1GetConsentResponse> {
            return localVarFp.authWebGetConsent(consentChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [redirect] redirect url.
         * @param {string} [loginChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetWebLogin(redirect?: string, loginChallenge?: string, options?: any): AxiosPromise<V1GetLoginResponse> {
            return localVarFp.authWebGetWebLogin(redirect, loginChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [logoutChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGetWebLogout(logoutChallenge?: string, options?: any): AxiosPromise<V1GetLogoutResponse> {
            return localVarFp.authWebGetWebLogout(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1GrantConsentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebGrantConsent(body: V1GrantConsentRequest, options?: any): AxiosPromise<V1GrantConsentResponse> {
            return localVarFp.authWebGrantConsent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1WebLoginAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebWebLogin(body: V1WebLoginAuthRequest, options?: any): AxiosPromise<V1WebLoginAuthReply> {
            return localVarFp.authWebWebLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1LogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authWebWebLogout(body: V1LogoutRequest, options?: any): AxiosPromise<V1LogoutResponse> {
            return localVarFp.authWebWebLogout(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authWebGetConsent operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebGetConsentRequest
 */
export interface AuthWebApiAuthWebGetConsentRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthWebApiAuthWebGetConsent
     */
    readonly consentChallenge?: string
}

/**
 * Request parameters for authWebGetWebLogin operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebGetWebLoginRequest
 */
export interface AuthWebApiAuthWebGetWebLoginRequest {
    /**
     * redirect url.
     * @type {string}
     * @memberof AuthWebApiAuthWebGetWebLogin
     */
    readonly redirect?: string

    /**
     * 
     * @type {string}
     * @memberof AuthWebApiAuthWebGetWebLogin
     */
    readonly loginChallenge?: string
}

/**
 * Request parameters for authWebGetWebLogout operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebGetWebLogoutRequest
 */
export interface AuthWebApiAuthWebGetWebLogoutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthWebApiAuthWebGetWebLogout
     */
    readonly logoutChallenge?: string
}

/**
 * Request parameters for authWebGrantConsent operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebGrantConsentRequest
 */
export interface AuthWebApiAuthWebGrantConsentRequest {
    /**
     * 
     * @type {V1GrantConsentRequest}
     * @memberof AuthWebApiAuthWebGrantConsent
     */
    readonly body: V1GrantConsentRequest
}

/**
 * Request parameters for authWebWebLogin operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebWebLoginRequest
 */
export interface AuthWebApiAuthWebWebLoginRequest {
    /**
     * 
     * @type {V1WebLoginAuthRequest}
     * @memberof AuthWebApiAuthWebWebLogin
     */
    readonly body: V1WebLoginAuthRequest
}

/**
 * Request parameters for authWebWebLogout operation in AuthWebApi.
 * @export
 * @interface AuthWebApiAuthWebWebLogoutRequest
 */
export interface AuthWebApiAuthWebWebLogoutRequest {
    /**
     * 
     * @type {V1LogoutRequest}
     * @memberof AuthWebApiAuthWebWebLogout
     */
    readonly body: V1LogoutRequest
}

/**
 * AuthWebApi - object-oriented interface
 * @export
 * @class AuthWebApi
 * @extends {BaseAPI}
 */
export class AuthWebApi extends BaseAPI {
    /**
     * 
     * @param {AuthWebApiAuthWebGetConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebGetConsent(requestParameters: AuthWebApiAuthWebGetConsentRequest = {}, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebGetConsent(requestParameters.consentChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthWebApiAuthWebGetWebLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebGetWebLogin(requestParameters: AuthWebApiAuthWebGetWebLoginRequest = {}, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebGetWebLogin(requestParameters.redirect, requestParameters.loginChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthWebApiAuthWebGetWebLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebGetWebLogout(requestParameters: AuthWebApiAuthWebGetWebLogoutRequest = {}, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebGetWebLogout(requestParameters.logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthWebApiAuthWebGrantConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebGrantConsent(requestParameters: AuthWebApiAuthWebGrantConsentRequest, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebGrantConsent(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthWebApiAuthWebWebLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebWebLogin(requestParameters: AuthWebApiAuthWebWebLoginRequest, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebWebLogin(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthWebApiAuthWebWebLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWebApi
     */
    public authWebWebLogout(requestParameters: AuthWebApiAuthWebWebLogoutRequest, options?: AxiosRequestConfig) {
        return AuthWebApiFp(this.configuration).authWebWebLogout(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
